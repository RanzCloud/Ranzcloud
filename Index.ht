            
            <div id="productModalContent">
                <!-- Product details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Checkout Modal -->
    <div id="checkoutModal" class="modal">
        <div class="bg-dark-light border border-gray-700 rounded-xl p-8 w-full max-w-md mx-4">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Checkout</h2>
                <button onclick="closeModal('checkoutModal')" class="text-gray-400 hover:text-white">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form onsubmit="handleCheckout(event)">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Username Layanan</label>
                    <input type="text" id="serviceUsername" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Password Layanan</label>
                    <input type="password" id="servicePassword" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Nomor WhatsApp</label>
                    <input type="tel" id="checkoutWhatsapp" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                </div>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Metode Pembayaran</label>
                    <select id="paymentMethod" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                        <!-- Payment methods will be loaded here -->
                    </select>
                </div>
                
                <div id="orderSummary" class="mb-6 p-4 bg-dark border border-gray-600 rounded-lg">
                    <!-- Order summary will be loaded here -->
                </div>
                
                <button type="submit" class="w-full bg-primary hover:bg-cyan-600 text-white py-2 rounded-lg transition-colors">
                    Buat Pesanan
                </button>
            </form>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div id="addProductModal" class="modal">
        <div class="bg-dark-light border border-gray-700 rounded-xl p-8 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">Tambah Produk</h2>
                <button onclick="closeModal('addProductModal')" class="text-gray-400 hover:text-white">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <form onsubmit="handleAddProduct(event)">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Nama Produk</label>
                        <input type="text" id="productName" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Kategori</label>
                        <select id="productCategory" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                            <option value="hosting">Hosting</option>
                            <option value="vps">VPS</option>
                            <option value="domain">Domain</option>
                            <option value="rdp">RDP</option>
                        </select>
                    </div>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Deskripsi</label>
                    <textarea id="productDescription" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary" rows="3"></textarea>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Harga (Rp)</label>
                        <input type="number" id="productPrice" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Periode</label>
                        <select id="productPeriod" required class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                            <option value="bulan">Per Bulan</option>
                            <option value="tahun">Per Tahun</option>
                        </select>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">RAM (GB)</label>
                        <input type="number" id="productRam" class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">CPU (Core)</label>
                        <input type="number" id="productCpu" class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Storage (GB)</label>
                        <input type="number" id="productStorage" class="w-full px-3 py-2 bg-dark border border-gray-600 rounded-lg text-white focus:outline-none focus:border-primary">
                    </div>
                </div>
                
                <button type="submit" class="w-full bg-primary hover:bg-cyan-600 text-white py-2 rounded-lg transition-colors">
                    Tambah Produk
                </button>
            </form>
        </div>
    </div>

    <!-- Chat Widget -->
    <div class="chat-widget">
        <div id="chatBox" class="chat-box">
            <div class="flex items-center justify-between p-4 border-b border-gray-600">
                <div class="flex items-center">
                    <div class="w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-3">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    <div>
                        <div class="text-white font-semibold">Support Engineer</div>
                        <div class="text-xs text-green-400">Online</div>
                    </div>
                </div>
                <button onclick="toggleChat()" class="text-gray-400 hover:text-white">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div id="chatMessages" class="flex-1 p-4 overflow-y-auto" style="height: 280px;">
                <div class="text-center text-gray-400 text-sm mb-4">
                    Mulai percakapan dengan tim support kami
                </div>
            </div>
            
            <div class="p-4 border-t border-gray-600">
                <form onsubmit="sendMessage(event)" class="flex">
                    <input type="text" id="chatInput" placeholder="Ketik pesan..." class="flex-1 px-3 py-2 bg-dark border border-gray-600 rounded-l-lg text-white text-sm focus:outline-none focus:border-primary">
                    <button type="submit" class="bg-primary hover:bg-cyan-600 text-white px-4 py-2 rounded-r-lg transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                        </svg>
                    </button>
                </form>
            </div>
        </div>
        
        <button id="chatToggle" onclick="toggleChat()" class="bg-primary hover:bg-cyan-600 text-white p-4 rounded-full shadow-lg transition-all transform hover:scale-110">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
        </button>
    </div>

    <!-- Footer -->
    <footer class="bg-dark border-t border-gray-800 py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
                <div class="col-span-1 md:col-span-2">
                    <h3 class="text-2xl font-bold text-gradient mb-4">RanzCloud</h3>
                    <p class="text-gray-400 mb-4 max-w-md">
                        Penyedia layanan hosting dan solusi digital profesional untuk mendukung pertumbuhan bisnis Anda dengan teknologi terdepan.
                    </p>
                    <p class="text-sm text-gray-500">
                        Jl. Digital Street No. 123, Jakarta Selatan<br>
                        Indonesia 12345
                    </p>
                </div>
                
                <div>
                    <h4 class="text-lg font-semibold text-white mb-4">Layanan</h4>
                    <ul class="space-y-2 text-gray-400">
                        <li><a href="#" class="hover:text-primary transition-colors">SA-MP Hosting</a></li>
                        <li><a href="#" class="hover:text-primary transition-colors">Bot JS Hosting</a></li>
                        <li><a href="#" class="hover:text-primary transition-colors">VPS</a></li>
                        <li><a href="#" class="hover:text-primary transition-colors">Domain</a></li>
                        <li><a href="#" class="hover:text-primary transition-colors">RDP</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="text-lg font-semibold text-white mb-4">Perusahaan</h4>
                    <ul class="space-y-2 text-gray-400">
                        <li><a href="#" onclick="showHome()" class="hover:text-primary transition-colors">Beranda</a></li>
                        <li><a href="#" onclick="showProducts()" class="hover:text-primary transition-colors">Produk</a></li>
                        <li><a href="#" onclick="showContact()" class="hover:text-primary transition-colors">Kontak</a></li>
                        <li><a href="#" class="hover:text-primary transition-colors">Syarat & Ketentuan</a></li>
                    </ul>
                </div>
            </div>
            
            <div class="border-t border-gray-800 mt-8 pt-8 text-center">
                <p class="text-gray-400">
                    © 2024 RanzCloud. All rights reserved. | Uptime SLA 99.9% Guaranteed
                </p>
            </div>
        </div>
    </footer>

    <script>
        // Global variables
        let currentUser = null;
        let currentProduct = null;
        let chatOpen = false;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            // Check if user is logged in
            const savedUser = localStorage.getItem('ranz_current_user');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                updateAuthUI();
            }

            // Initialize default data
            initializeDefaultData();
            
            // Load products
            loadProducts();
            loadHomeProducts();
            
            // Load payment methods
            loadPaymentMethods();
            
            // Load settings
            loadSettings();
            
            // Load chat messages
            loadChatMessages();
            
            // Request notification permission
            if ('Notification' in window) {
                Notification.requestPermission();
            }
        }

        function initializeDefaultData() {
            // Initialize products if not exists
            if (!localStorage.getItem('ranz_products')) {
                const defaultProducts = [
                    {
                        id: 1,
                        name: 'SA-MP Hosting Basic',
                        category: 'hosting',
                        description: 'Server hosting khusus untuk SA-MP dengan performa tinggi dan uptime 99.9%',
                        price: 50000,
                        period: 'bulan',
                        specs: { ram: 2, cpu: 1, storage: 10 },
                        features: ['DDoS Protection', 'Control Panel Mudah', 'Support 24/7']
                    },
                    {
                        id: 2,
                        name: 'Bot JS Hosting',
                        category: 'hosting',
                        description: 'Hosting khusus untuk bot JavaScript dengan Node.js environment',
                        price: 30000,
                        period: 'bulan',
                        specs: { ram: 1, cpu: 1, storage: 5 },
                        features: ['Node.js Support', 'Auto Restart', 'Real-time Monitoring']
                    },
                    {
                        id: 3,
                        name: 'VPS Basic',
                        category: 'vps',
                        description: 'VPS dengan kontrol penuh dan performa tinggi untuk aplikasi Anda',
                        price: 100000,
                        period: 'bulan',
                        specs: { ram: 4, cpu: 2, storage: 50 },
                        features: ['Full Root Access', 'SSD Storage', 'Multiple OS Options']
                    },
                    {
                        id: 4,
                        name: 'Domain .com',
                        category: 'domain',
                        description: 'Registrasi domain .com dengan harga kompetitif',
                        price: 150000,
                        period: 'tahun',
                        specs: {},
                        features: ['DNS Management', 'WHOIS Protection', 'Email Forwarding']
                    },
                    {
                        id: 5,
                        name: 'RDP Windows',
                        category: 'rdp',
                        description: 'Akses desktop jarak jauh dengan Windows Server untuk kebutuhan bisnis',
                        price: 75000,
                        period: 'bulan',
                        specs: { ram: 8, cpu: 4, storage: 100 },
                        features: ['Windows Server', 'High-Speed Connection', 'Admin Access']
                    }
                ];
                localStorage.setItem('ranz_products', JSON.stringify(defaultProducts));
            }

            // Initialize payment methods if not exists
            if (!localStorage.getItem('ranz_payment_methods')) {
                const defaultPayments = [
                    { id: 1, name: 'DANA', number: '083838293767' },
                    { id: 2, name: 'GoPay', number: '083827307622' },
                    { id: 3, name: 'OVO', number: '083827307622' }
                ];
                localStorage.setItem('ranz_payment_methods', JSON.stringify(defaultPayments));
            }

            // Initialize webhook URL if not exists
            if (!localStorage.getItem('ranz_discord_webhook')) {
                localStorage.setItem('ranz_discord_webhook', '');
            }

            // Initialize orders if not exists
            if (!localStorage.getItem('ranz_orders')) {
                localStorage.setItem('ranz_orders', JSON.stringify([]));
            }

            // Initialize users if not exists
            if (!localStorage.getItem('ranz_users')) {
                localStorage.setItem('ranz_users', JSON.stringify([]));
            }

            // Initialize chat messages if not exists
            if (!localStorage.getItem('ranz_chat_messages')) {
                localStorage.setItem('ranz_chat_messages', JSON.stringify([]));
            }
        }

        // Navigation functions
        function showHome() {
            hideAllPages();
            document.getElementById('homePage').classList.remove('hidden');
            loadHomeProducts();
        }

        function showProducts() {
            hideAllPages();
            document.getElementById('productsPage').classList.remove('hidden');
            loadProducts();
        }

        function showContact() {
            hideAllPages();
            document.getElementById('contactPage').classList.remove('hidden');
        }

        function showOrders() {
            if (!currentUser) {
                showLogin();
                return;
            }
            hideAllPages();
            document.getElementById('ordersPage').classList.remove('hidden');
            loadUserOrders();
        }

        function showAdmin() {
            if (!currentUser || currentUser.username !== 'Ranzcloud') {
                alert('Akses ditolak. Hanya admin yang dapat mengakses halaman ini.');
                return;
            }
            hideAllPages();
            document.getElementById('adminPage').classList.remove('hidden');
            showAdminSection('products'); // Show products section by default
            loadAdminData();
        }

        function hideAllPages() {
            const pages = ['homePage', 'productsPage', 'contactPage', 'ordersPage', 'adminPage'];
            pages.forEach(page => {
                document.getElementById(page).classList.add('hidden');
            });
        }

        // Auth functions
        function showLogin() {
            document.getElementById('loginModal').classList.add('show');
        }

        function showRegister() {
            document.getElementById('registerModal').classList.add('show');
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('show');
        }

        function handleLogin(event) {
            event.preventDefault();
            
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;

            // Check admin credentials
            if (username === 'Ranzcloud' && password === 'Ranzcloud') {
                currentUser = { username: 'Ranzcloud', email: 'admin@ranzcloud.local', whatsapp: '+6283838293767', isAdmin: true };
                localStorage.setItem('ranz_current_user', JSON.stringify(currentUser));
                updateAuthUI();
                closeModal('loginModal');
                alert('Selamat datang, Admin!');
                return;
            }

            // Check regular users
            const users = JSON.parse(localStorage.getItem('ranz_users') || '[]');
            const user = users.find(u => u.username === username && u.password === password);

            if (user) {
                currentUser = user;
                localStorage.setItem('ranz_current_user', JSON.stringify(currentUser));
                updateAuthUI();
                closeModal('loginModal');
                alert('Login berhasil!');
            } else {
                alert('Username atau password salah!');
            }
        }

        function handleRegister(event) {
            event.preventDefault();
            
            const username = document.getElementById('registerUsername').value;
            const email = document.getElementById('registerEmail').value;
            const whatsapp = document.getElementById('registerWhatsapp').value;
            const password = document.getElementById('registerPassword').value;

            const users = JSON.parse(localStorage.getItem('ranz_users') || '[]');
            
            // Check if username already exists
            if (users.find(u => u.username === username)) {
                alert('Username sudah digunakan!');
                return;
            }

            // Add new user
            const newUser = {
                id: Date.now(),
                username,
                email,
                whatsapp,
                password,
                isAdmin: false,
                created: new Date().toISOString()
            };

            users.push(newUser);
            localStorage.setItem('ranz_users', JSON.stringify(users));

            alert('Registrasi berhasil! Silakan login.');
            closeModal('registerModal');
            showLogin();
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('ranz_current_user');
            updateAuthUI();
            showHome();
            alert('Logout berhasil!');
        }

        function updateAuthUI() {
            const authButtons = document.getElementById('authButtons');
            const userMenu = document.getElementById('userMenu');
            const welcomeUser = document.getElementById('welcomeUser');
            const ordersLink = document.getElementById('ordersLink');
            const adminLink = document.getElementById('adminLink');

            if (currentUser) {
                authButtons.classList.add('hidden');
                userMenu.classList.remove('hidden');
                welcomeUser.textContent = `Halo, ${currentUser.username}`;
                ordersLink.style.display = 'block';
                
                if (currentUser.isAdmin || currentUser.username === 'Ranzcloud') {
                    adminLink.style.display = 'block';
                }
            } else {
                authButtons.classList.remove('hidden');
                userMenu.classList.add('hidden');
                ordersLink.style.display = 'none';
                adminLink.style.display = 'none';
            }
        }

        // Product functions
        function loadProducts() {
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const productGrid = document.getElementById('productGrid');
            
            productGrid.innerHTML = products.map(product => `
                <div class="card-hover bg-dark border border-gray-700 rounded-xl p-6">
                    <div class="w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-4">
                        ${getProductIcon(product.category)}
                    </div>
                    <h3 class="text-xl font-semibold text-white mb-3">${product.name}</h3>
                    <p class="text-gray-400 mb-4">${product.description}</p>
                    <div class="text-primary font-semibold mb-4">Rp ${product.price.toLocaleString()}/${product.period}</div>
                    <div class="mb-4">
                        ${product.specs.ram ? `<div class="text-sm text-gray-400">RAM: ${product.specs.ram}GB</div>` : ''}
                        ${product.specs.cpu ? `<div class="text-sm text-gray-400">CPU: ${product.specs.cpu} Core</div>` : ''}
                        ${product.specs.storage ? `<div class="text-sm text-gray-400">Storage: ${product.specs.storage}GB</div>` : ''}
                    </div>
                    <div class="flex gap-2">
                        <button onclick="showProductDetail(${product.id})" class="flex-1 bg-primary hover:bg-cyan-600 text-white px-4 py-2 rounded-lg transition-colors">
                            Detail
                        </button>
                        <button onclick="buyProduct(${product.id})" class="flex-1 border border-primary text-primary hover:bg-primary hover:text-white px-4 py-2 rounded-lg transition-colors">
                            Beli
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function loadHomeProducts() {
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const homeProductGrid = document.getElementById('homeProductGrid');
            
            // Show only first 6 products on home page
            const homeProducts = products.slice(0, 6);
            
            homeProductGrid.innerHTML = homeProducts.map(product => `
                <div class="card-hover bg-dark border border-gray-700 rounded-xl p-6">
                    <div class="w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-4">
                        ${getProductIcon(product.category)}
                    </div>
                    <h3 class="text-xl font-semibold text-white mb-3">${product.name}</h3>
                    <p class="text-gray-400 mb-4">${product.description}</p>
                    <div class="text-primary font-semibold mb-4">Rp ${product.price.toLocaleString()}/${product.period}</div>
                    <ul class="text-sm text-gray-400 space-y-2">
                        ${product.features.map(feature => `<li>• ${feature}</li>`).join('')}
                    </ul>
                </div>
            `).join('');
        }

        function getProductIcon(category) {
            const icons = {
                hosting: '<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2"></path></svg>',
                vps: '<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path></svg>',
                domain: '<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path></svg>',
                rdp: '<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg>'
            };
            return icons[category] || icons.hosting;
        }

        function showProductDetail(productId) {
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const product = products.find(p => p.id === productId);
            
            if (!product) return;

            document.getElementById('productModalTitle').textContent = product.name;
            document.getElementById('productModalContent').innerHTML = `
                <div class="space-y-6">
                    <div>
                        <h3 class="text-lg font-semibold text-white mb-2">Deskripsi</h3>
                        <p class="text-gray-400">${product.description}</p>
                    </div>
                    
                    <div>
                        <h3 class="text-lg font-semibold text-white mb-2">Harga</h3>
                        <div class="text-2xl font-bold text-primary">Rp ${product.price.toLocaleString()}/${product.period}</div>
                    </div>
                    
                    ${Object.keys(product.specs).length > 0 ? `
                    <div>
                        <h3 class="text-lg font-semibold text-white mb-2">Spesifikasi</h3>
                        <div class="grid grid-cols-3 gap-4">
                            ${product.specs.ram ? `<div class="text-center p-3 bg-dark border border-gray-600 rounded-lg"><div class="text-primary font-semibold">${product.specs.ram}GB</div><div class="text-sm text-gray-400">RAM</div></div>` : ''}
                            ${product.specs.cpu ? `<div class="text-center p-3 bg-dark border border-gray-600 rounded-lg"><div class="text-primary font-semibold">${product.specs.cpu} Core</div><div class="text-sm text-gray-400">CPU</div></div>` : ''}
                            ${product.specs.storage ? `<div class="text-center p-3 bg-dark border border-gray-600 rounded-lg"><div class="text-primary font-semibold">${product.specs.storage}GB</div><div class="text-sm text-gray-400">Storage</div></div>` : ''}
                        </div>
                    </div>
                    ` : ''}
                    
                    <div>
                        <h3 class="text-lg font-semibold text-white mb-2">Fitur</h3>
                        <ul class="space-y-2">
                            ${product.features.map(feature => `<li class="flex items-center text-gray-400"><svg class="w-4 h-4 text-primary mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>${feature}</li>`).join('')}
                        </ul>
                    </div>
                    
                    <div class="bg-primary/10 border border-primary/20 rounded-lg p-4">
                        <div class="flex items-center mb-2">
                            <svg class="w-5 h-5 text-primary mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span class="text-primary font-semibold">99.9% Uptime SLA</span>
                        </div>
                        <p class="text-sm text-gray-400">Jaminan uptime tinggi dengan infrastruktur yang handal dan monitoring 24/7</p>
                    </div>
                    
                    <button onclick="buyProduct(${product.id}); closeModal('productModal')" class="w-full bg-primary hover:bg-cyan-600 text-white py-3 rounded-lg text-lg font-semibold transition-colors">
                        Beli Sekarang
                    </button>
                </div>
            `;
            
            document.getElementById('productModal').classList.add('show');
        }

        function buyProduct(productId) {
            if (!currentUser) {
                showLogin();
                return;
            }

            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const product = products.find(p => p.id === productId);
            
            if (!product) return;

            currentProduct = product;
            
            // Load payment methods
            const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
            const paymentSelect = document.getElementById('paymentMethod');
            paymentSelect.innerHTML = paymentMethods.map(method => 
                `<option value="${method.id}">${method.name} - ${method.number}</option>`
            ).join('');

            // Fill WhatsApp from user data
            document.getElementById('checkoutWhatsapp').value = currentUser.whatsapp || '';

            // Show order summary
            document.getElementById('orderSummary').innerHTML = `
                <h4 class="font-semibold text-white mb-2">Ringkasan Pesanan</h4>
                <div class="flex justify-between text-gray-400 mb-2">
                    <span>${product.name}</span>
                    <span>Rp ${product.price.toLocaleString()}</span>
                </div>
                <div class="border-t border-gray-600 pt-2 flex justify-between font-semibold text-white">
                    <span>Total</span>
                    <span>Rp ${product.price.toLocaleString()}</span>
                </div>
            `;

            document.getElementById('checkoutModal').classList.add('show');
        }

        function handleCheckout(event) {
            event.preventDefault();
            
            const serviceUsername = document.getElementById('serviceUsername').value;
            const servicePassword = document.getElementById('servicePassword').value;
            const whatsapp = document.getElementById('checkoutWhatsapp').value;
            const paymentMethodId = document.getElementById('paymentMethod').value;

            const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
            const paymentMethod = paymentMethods.find(p => p.id == paymentMethodId);

            if (!paymentMethod) {
                alert('Metode pembayaran tidak valid!');
                return;
            }

            // Create order
            const order = {
                id: Date.now(),
                user: currentUser.username,
                items: [currentProduct],
                total: currentProduct.price,
                payment_method: paymentMethod.name,
                payment_number: paymentMethod.number,
                status: 'pending',
                created: new Date().toISOString(),
                serviceCredentials: {
                    username: serviceUsername,
                    password: servicePassword
                },
                whatsapp: whatsapp
            };

            // Save order
            const orders = JSON.parse(localStorage.getItem('ranz_orders') || '[]');
            orders.push(order);
            localStorage.setItem('ranz_orders', JSON.stringify(orders));

            console.log('Order created:', order); // Debug log

            // Send Discord notification
            try {
                sendDiscordNotification(order);
                console.log('Discord notification sent'); // Debug log
            } catch (error) {
                console.log('Discord notification error:', error);
            }

            // Show payment instructions
            closeModal('checkoutModal');
            showPaymentInstructions(order, paymentMethod);
        }

        function showPaymentInstructions(order, paymentMethod) {
            const webhookUrl = localStorage.getItem('ranz_discord_webhook');
            const webhookStatus = webhookUrl && webhookUrl.trim() !== '' ? 
                '\n\n✅ Notifikasi Discord telah dikirim ke admin.' : 
                '\n\n⚠️ Webhook Discord belum dikonfigurasi.';
            
            alert(`Pesanan berhasil dibuat!${webhookStatus}\n\nID Pesanan: ${order.id}\nTotal: Rp ${order.total.toLocaleString()}\n\nSilakan transfer ke:\n${paymentMethod.name}: ${paymentMethod.number}\n\nSetelah transfer, hubungi admin untuk konfirmasi.`);
            showOrders();
        }

        // Order functions
        function loadUserOrders() {
            const orders = JSON.parse(localStorage.getItem('ranz_orders') || '[]');
            const userOrders = orders.filter(order => order.user === currentUser.username);
            
            const ordersList = document.getElementById('ordersList');
            
            if (userOrders.length === 0) {
                ordersList.innerHTML = `
                    <div class="text-center py-12">
                        <div class="text-gray-400 mb-4">Belum ada pesanan</div>
                        <button onclick="showProducts()" class="bg-primary hover:bg-cyan-600 text-white px-6 py-2 rounded-lg transition-colors">
                            Mulai Belanja
                        </button>
                    </div>
                `;
                return;
            }

            ordersList.innerHTML = userOrders.map(order => `
                <div class="bg-dark-light border border-gray-700 rounded-xl p-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h3 class="text-lg font-semibold text-white">Pesanan #${order.id}</h3>
                            <p class="text-gray-400">${new Date(order.created).toLocaleDateString('id-ID')}</p>
                        </div>
                        <span class="px-3 py-1 rounded-full text-sm ${getStatusColor(order.status)}">
                            ${getStatusText(order.status)}
                        </span>
                    </div>
                    
                    <div class="space-y-2 mb-4">
                        ${order.items.map(item => `
                            <div class="flex justify-between text-gray-400">
                                <span>${item.name}</span>
                                <span>Rp ${item.price.toLocaleString()}</span>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div class="border-t border-gray-600 pt-4 flex justify-between items-center">
                        <div class="text-white font-semibold">Total: Rp ${order.total.toLocaleString()}</div>
                        <button onclick="generateInvoice(${order.id})" class="bg-primary hover:bg-cyan-600 text-white px-4 py-2 rounded-lg transition-colors">
                            Generate Invoice
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function getStatusColor(status) {
            const colors = {
                pending: 'bg-yellow-500/20 text-yellow-400',
                processing: 'bg-blue-500/20 text-blue-400',
                completed: 'bg-green-500/20 text-green-400',
                cancelled: 'bg-red-500/20 text-red-400'
            };
            return colors[status] || colors.pending;
        }

        function getStatusText(status) {
            const texts = {
                pending: 'Menunggu Pembayaran',
                processing: 'Diproses',
                completed: 'Selesai',
                cancelled: 'Dibatalkan'
            };
            return texts[status] || 'Menunggu Pembayaran';
        }

        function generateInvoice(orderId) {
            const orders = JSON.parse(localStorage.getItem('ranz_orders') || '[]');
            const order = orders.find(o => o.id === orderId);
            
            if (!order) return;

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Header
            doc.setFontSize(20);
            doc.text('RanzCloud Invoice', 20, 30);
            
            doc.setFontSize(12);
            doc.text(`Invoice #${order.id}`, 20, 50);
            doc.text(`Tanggal: ${new Date(order.created).toLocaleDateString('id-ID')}`, 20, 60);
            doc.text(`Status: ${getStatusText(order.status)}`, 20, 70);
            
            // Customer info
            doc.text('Pelanggan:', 20, 90);
            doc.text(`Username: ${order.user}`, 20, 100);
            doc.text(`WhatsApp: ${order.whatsapp}`, 20, 110);
            
            // Items
            doc.text('Item:', 20, 130);
            let yPos = 140;
            order.items.forEach(item => {
                doc.text(`${item.name}`, 20, yPos);
                doc.text(`Rp ${item.price.toLocaleString()}`, 150, yPos);
                yPos += 10;
            });
            
            // Total
            doc.text(`Total: Rp ${order.total.toLocaleString()}`, 20, yPos + 20);
            doc.text(`Metode Pembayaran: ${order.payment_method}`, 20, yPos + 30);
            
            // Footer
            doc.text('Terima kasih telah menggunakan layanan RanzCloud!', 20, yPos + 50);
            doc.text('Uptime SLA 99.9% Guaranteed', 20, yPos + 60);
            
            doc.save(`invoice-${order.id}.pdf`);
        }

        // Admin functions
        function showAdminSection(section) {
            // Update nav buttons
            document.querySelectorAll('.admin-nav-btn').forEach(btn => {
                btn.classList.remove('active', 'text-primary', 'bg-gray-800');
            });
            
            // Find and activate the correct button
            const targetBtn = Array.from(document.querySelectorAll('.admin-nav-btn')).find(btn => 
                btn.textContent.toLowerCase().includes(section.toLowerCase()) ||
                (section === 'products' && btn.textContent.includes('Produk')) ||
                (section === 'orders' && btn.textContent.includes('Pesanan')) ||
                (section === 'payments' && btn.textContent.includes('Pembayaran')) ||
                (section === 'settings' && btn.textContent.includes('Pengaturan'))
            );
            
            if (targetBtn) {
                targetBtn.classList.add('active', 'text-primary', 'bg-gray-800');
            }

            // Hide all sections
            document.querySelectorAll('.admin-section').forEach(adminSection => {
                adminSection.classList.add('hidden');
            });

            // Show selected section
            const sectionElement = document.getElementById(`admin${section.charAt(0).toUpperCase() + section.slice(1)}`);
            if (sectionElement) {
                sectionElement.classList.remove('hidden');
            }

            // Load data for the section
            if (section === 'products') {
                loadAdminProducts();
            } else if (section === 'orders') {
                loadAdminOrders();
            } else if (section === 'payments') {
                loadAdminPaymentMethods();
            } else if (section === 'settings') {
                loadSettings();
            }
        }

        function loadAdminData() {
            loadAdminProducts();
        }

        function loadAdminProducts() {
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const adminProductsList = document.getElementById('adminProductsList');
            
            adminProductsList.innerHTML = products.map(product => `
                <div class="bg-dark border border-gray-600 rounded-lg p-4">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h4 class="font-semibold text-white">${product.name}</h4>
                            <p class="text-gray-400 text-sm">${product.description}</p>
                            <div class="text-primary font-semibold mt-2">Rp ${product.price.toLocaleString()}/${product.period}</div>
                        </div>
                        <div class="flex gap-2 ml-4">
                            <button onclick="editProduct(${product.id})" class="text-blue-400 hover:text-blue-300">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteProduct(${product.id})" class="text-red-400 hover:text-red-300">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function loadAdminOrders() {
            const orders = JSON.parse(localStorage.getItem('ranz_orders') || '[]');
            const adminOrdersList = document.getElementById('adminOrdersList');
            
            if (orders.length === 0) {
                adminOrdersList.innerHTML = '<div class="text-center text-gray-400 py-8">Belum ada pesanan</div>';
                return;
            }

            adminOrdersList.innerHTML = orders.map(order => `
                <div class="bg-dark border border-gray-600 rounded-lg p-4">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h4 class="font-semibold text-white">Pesanan #${order.id}</h4>
                            <p class="text-gray-400 text-sm">User: ${order.user}</p>
                            <p class="text-gray-400 text-sm">${new Date(order.created).toLocaleDateString('id-ID')}</p>
                        </div>
                        <select onchange="updateOrderStatus(${order.id}, this.value)" class="bg-dark border border-gray-600 rounded px-2 py-1 text-white text-sm">
                            <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Menunggu Pembayaran</option>
                            <option value="processing" ${order.status === 'processing' ? 'selected' : ''}>Diproses</option>
                            <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>Selesai</option>
                            <option value="cancelled" ${order.status === 'cancelled' ? 'selected' : ''}>Dibatalkan</option>
                        </select>
                    </div>
                    
                    <div class="text-white font-semibold">Total: Rp ${order.total.toLocaleString()}</div>
                    <div class="text-gray-400 text-sm">Pembayaran: ${order.payment_method}</div>
                    <div class="text-gray-400 text-sm">WhatsApp: ${order.whatsapp}</div>
                </div>
            `).join('');
        }

        function updateOrderStatus(orderId, newStatus) {
            const orders = JSON.parse(localStorage.getItem('ranz_orders') || '[]');
            const orderIndex = orders.findIndex(o => o.id === orderId);
            
            if (orderIndex !== -1) {
                orders[orderIndex].status = newStatus;
                localStorage.setItem('ranz_orders', JSON.stringify(orders));
                
                // Send notification to user
                if (newStatus === 'completed') {
                    sendDiscordNotification({
                        ...orders[orderIndex],
                        message: `Pesanan #${orderId} telah selesai diproses!`
                    });
                }
            }
        }

        function showAddProductForm() {
            document.getElementById('addProductModal').classList.add('show');
        }

        function handleAddProduct(event) {
            event.preventDefault();
            
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            
            const newProduct = {
                id: Date.now(),
                name: document.getElementById('productName').value,
                category: document.getElementById('productCategory').value,
                description: document.getElementById('productDescription').value,
                price: parseInt(document.getElementById('productPrice').value),
                period: document.getElementById('productPeriod').value,
                specs: {
                    ram: parseInt(document.getElementById('productRam').value) || 0,
                    cpu: parseInt(document.getElementById('productCpu').value) || 0,
                    storage: parseInt(document.getElementById('productStorage').value) || 0
                },
                features: ['Support 24/7', 'Uptime 99.9%', 'Setup Gratis']
            };

            products.push(newProduct);
            localStorage.setItem('ranz_products', JSON.stringify(products));
            
            closeModal('addProductModal');
            loadAdminProducts();
            loadProducts();
            loadHomeProducts();
            
            // Reset form
            document.querySelector('#addProductModal form').reset();
            
            alert('Produk berhasil ditambahkan!');
        }

        function deleteProduct(productId) {
            if (!confirm('Yakin ingin menghapus produk ini?')) return;
            
            const products = JSON.parse(localStorage.getItem('ranz_products') || '[]');
            const filteredProducts = products.filter(p => p.id !== productId);
            
            localStorage.setItem('ranz_products', JSON.stringify(filteredProducts));
            loadAdminProducts();
            loadProducts();
            loadHomeProducts();
            
            alert('Produk berhasil dihapus!');
        }

        // Payment methods functions
        function loadPaymentMethods() {
            const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
            const paymentSelect = document.getElementById('paymentMethod');
            
            if (paymentSelect) {
                paymentSelect.innerHTML = paymentMethods.map(method => 
                    `<option value="${method.id}">${method.name} - ${method.number}</option>`
                ).join('');
            }
        }

        function loadAdminPaymentMethods() {
            const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
            const paymentMethodsList = document.getElementById('paymentMethodsList');
            
            paymentMethodsList.innerHTML = paymentMethods.map(method => `
                <div class="bg-dark border border-gray-600 rounded-lg p-4 flex justify-between items-center">
                    <div>
                        <h4 class="font-semibold text-white">${method.name}</h4>
                        <p class="text-gray-400">${method.number}</p>
                    </div>
                    <button onclick="deletePaymentMethod(${method.id})" class="text-red-400 hover:text-red-300">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                </div>
            `).join('');
        }

        function showAddPaymentForm() {
            const name = prompt('Nama metode pembayaran:');
            const number = prompt('Nomor:');
            
            if (name && number) {
                const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
                const newMethod = {
                    id: Date.now(),
                    name: name,
                    number: number
                };
                
                paymentMethods.push(newMethod);
                localStorage.setItem('ranz_payment_methods', JSON.stringify(paymentMethods));
                
                loadAdminPaymentMethods();
                loadPaymentMethods();
                
                alert('Metode pembayaran berhasil ditambahkan!');
            }
        }

        function deletePaymentMethod(methodId) {
            if (!confirm('Yakin ingin menghapus metode pembayaran ini?')) return;
            
            const paymentMethods = JSON.parse(localStorage.getItem('ranz_payment_methods') || '[]');
            const filteredMethods = paymentMethods.filter(m => m.id !== methodId);
            
            localStorage.setItem('ranz_payment_methods', JSON.stringify(filteredMethods));
            loadAdminPaymentMethods();
            loadPaymentMethods();
            
            alert('Metode pembayaran berhasil dihapus!');
        }

        // Settings functions
        function loadSettings() {
            const webhookUrl = localStorage.getItem('ranz_discord_webhook') || '';
            const webhookInput = document.getElementById('webhookUrl');
            if (webhookInput) {
                webhookInput.value = webhookUrl;
            }
        }

        function saveSettings() {
            const webhookUrl = document.getElementById('webhookUrl').value;
            localStorage.setItem('ranz_discord_webhook', webhookUrl);
            alert('Pengaturan berhasil disimpan!');
        }

        // Discord notification function
        function sendDiscordNotification(order) {
            const webhookUrl = localStorage.getItem('ranz_discord_webhook');
            
            console.log('Webhook URL:', webhookUrl); // Debug log
            
            if (!webhookUrl || webhookUrl.trim() === '') {
                console.log('No webhook URL configured');
                return;
            }

            const itemsList = order.items.map(item => `• ${item.name} - Rp ${item.price.toLocaleString()}`).join('\n');

            const payload = {
                embeds: [{
                    title: '🛒 Pesanan Baru!',
                    description: `Pesanan #${order.id} telah dibuat oleh ${order.user}`,
                    color: 0x06b6d4,
                    fields: [
                        { name: '👤 User', value: order.user, inline: true },
                        { name: '💰 Total', value: `Rp ${order.total.toLocaleString()}`, inline: true },
                        { name: '💳 Pembayaran', value: `${order.payment_method}\n${order.payment_number || ''}`, inline: true },
                        { name: '📱 WhatsApp', value: order.whatsapp, inline: true },
                        { name: '📊 Status', value: getStatusText(order.status), inline: true },
                        { name: '🛍️ Items', value: itemsList, inline: false }
                    ],
                    timestamp: new Date().toISOString(),
                    footer: { text: 'RanzCloud Business - Uptime SLA 99.9%' }
                }]
            };

            console.log('Sending Discord notification:', payload); // Debug log

            fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            })
            .then(response => {
                console.log('Discord webhook response:', response.status);
                if (response.ok) {
                    console.log('Discord notification sent successfully');
                } else {
                    console.log('Discord webhook failed:', response.statusText);
                }
            })
            .catch(error => {
                console.log('Discord webhook error (CORS may block this):', error);
                // Show user that notification was attempted
                if (currentUser && currentUser.isAdmin) {
                    console.log('Notification attempted - check Discord webhook URL in settings');
                }
            });
        }

        // Chat functions
        function toggleChat() {
            const chatBox = document.getElementById('chatBox');
            chatOpen = !chatOpen;
            
            if (chatOpen) {
                chatBox.classList.add('show');
                loadChatMessages();
            } else {
                chatBox.classList.remove('show');
            }
        }

        function loadChatMessages() {
            const messages = JSON.parse(localStorage.getItem('ranz_chat_messages') || '[]');
            const chatMessages = document.getElementById('chatMessages');
            
            if (messages.length === 0) {
                chatMessages.innerHTML = `
                    <div class="text-center text-gray-400 text-sm mb-4">
                        Mulai percakapan dengan tim support kami
                    </div>
                `;
                return;
            }

            chatMessages.innerHTML = messages.map(message => `
                <div class="mb-3 ${message.sender === currentUser?.username ? 'text-right' : 'text-left'}">
                    <div class="inline-block max-w-[80%] p-2 rounded-lg text-sm ${
                        message.sender === currentUser?.username 
                            ? 'bg-primary text-white' 
                            : 'bg-gray-700 text-gray-300'
                    }">
                        ${message.sender !== currentUser?.username ? `<div class="text-xs text-gray-400 mb-1">${message.sender}</div>` : ''}
                        ${message.message}
                    </div>
                    <div class="text-xs text-gray-500 mt-1">
                        ${new Date(message.timestamp).toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' })}
                    </div>
                </div>
            `).join('');
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function sendMessage(event) {
            event.preventDefault();
            
            if (!currentUser) {
                alert('Silakan login terlebih dahulu untuk menggunakan chat.');
                return;
            }

            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();
            
            if (!message) return;

            const messages = JSON.parse(localStorage.getItem('ranz_chat_messages') || '[]');
            const newMessage = {
                id: Date.now(),
                sender: currentUser.username,
                message: message,
                timestamp: new Date().toISOString()
            };

            messages.push(newMessage);
            localStorage.setItem('ranz_chat_messages', JSON.stringify(messages));

            // Send notification to admin
            sendChatNotification(newMessage);

            // Auto-reply from support (simulation)
            setTimeout(() => {
                const supportReply = {
                    id: Date.now() + 1,
                    sender: 'Support Engineer',
                    message: 'Terima kasih telah menghubungi kami. Tim support akan segera membantu Anda.',
                    timestamp: new Date().toISOString()
                };
                
                messages.push(supportReply);
                localStorage.setItem('ranz_chat_messages', JSON.stringify(messages));
                
                if (chatOpen) {
                    loadChatMessages();
                }
                
                // Show notification
                if ('Notification' in window && Notification.permission === 'granted') {
                    new Notification('RanzCloud Support', {
                        body: supportReply.message,
                        icon: '/favicon.ico'
                    });
                }
            }, 2000);

            chatInput.value = '';
            loadChatMessages();
        }

        function sendChatNotification(message) {
            const webhookUrl = localStorage.getItem('ranz_discord_webhook');
            
            if (!webhookUrl) return;

            const payload = {
                embeds: [{
                    title: '💬 Pesan Chat Baru',
                    description: message.message,
                    color: 0x06b6d4,
                    fields: [
                        { name: 'Dari', value: message.sender, inline: true }
                    ],
                    timestamp: new Date().toISOString(),
                    footer: { text: 'RanzCloud Chat Support' }
                }]
            };

            fetch(webhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            }).catch(error => {
                console.log('Discord webhook error (CORS expected):', error);
            });
        }

        // Add scroll effect to navbar
        window.addEventListener('scroll', function() {
            const nav = document.querySelector('nav');
            if (window.scrollY > 50) {
                nav.classList.add('bg-dark');
                nav.classList.remove('bg-dark/95');
            } else {
                nav.classList.add('bg-dark/95');
                nav.classList.remove('bg-dark');
            }
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.classList.remove('show');
                }
            });
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98be8cf0527a9cf6',t:'MTc2MDAxOTk2MC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
